(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[666],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return k}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=c(n),k=i,u=h["".concat(s,".").concat(k)]||h[k]||d[k]||r;return n?a.createElement(u,o(o({ref:t},p),{},{components:n})):a.createElement(u,o({ref:t},p))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9886:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var a=n(2122),i=n(9756),r=(n(7294),n(3905)),o={sidebar_label:"checkpoint_utils",title:"utils.checkpointer.checkpoint_utils"},l={unversionedId:"reference/utils/checkpointer/checkpoint_utils",id:"reference/utils/checkpointer/checkpoint_utils",isDocsHomePage:!1,title:"utils.checkpointer.checkpoint_utils",description:"Checkpointer class and utility functions.",source:"@site/docs/reference/utils/checkpointer/checkpoint_utils.md",sourceDirName:"reference/utils/checkpointer",slug:"/reference/utils/checkpointer/checkpoint_utils",permalink:"/docs/reference/utils/checkpointer/checkpoint_utils",editUrl:"https://github.com/microsoft/PyMarlin/edit/master/website/docs/reference/utils/checkpointer/checkpoint_utils.md",version:"current",sidebar_label:"checkpoint_utils",frontMatter:{sidebar_label:"checkpoint_utils",title:"utils.checkpointer.checkpoint_utils"},sidebar:"referenceSideBar",previous:{title:"core.trainer_backend",permalink:"/docs/reference/core/trainer_backend"},next:{title:"utils.config_parser.custom_arg_parser",permalink:"/docs/reference/utils/config_parser/custom_arg_parser"}},s=[{value:"DefaultCheckpointerArguments Objects",id:"defaultcheckpointerarguments-objects",children:[]},{value:"AbstractCheckpointer Objects",id:"abstractcheckpointer-objects",children:[]},{value:"DefaultCheckpointer Objects",id:"defaultcheckpointer-objects",children:[]}],c={toc:s};function p(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Checkpointer class and utility functions."),(0,r.kt)("p",null,"Contains :class:",(0,r.kt)("inlineCode",{parentName:"p"},"~.AbstractCheckpointer")," class that can be extended and\npassed along to :class:",(0,r.kt)("inlineCode",{parentName:"p"},"~pymarlin.core.trainer.Trainer")," for checkpointing. A default implementation\nis provided via :class:",(0,r.kt)("inlineCode",{parentName:"p"},"~.DefaultCheckpointer")," in case no checkpointer is passed along to\n:class:",(0,r.kt)("inlineCode",{parentName:"p"},"~pymarlin.core.trainer.Trainer"),".\nUsers can control the :class:",(0,r.kt)("inlineCode",{parentName:"p"},"~.DefaultCheckpointer")," behavior via the\n:class:",(0,r.kt)("inlineCode",{parentName:"p"},"~.DefaultCheckpointerArguments"),",\nand modify the arguments dataclass for their own checkpointers."),(0,r.kt)("p",null,"Here is an example of how to create your own checkpointer:"),(0,r.kt)("p",null,".. code-block:: python"),(0,r.kt)("h1",{id:"implement-a-dataclass-for-custom-checkpointer-arguments"},"Implement a dataclass for custom checkpointer arguments"),(0,r.kt)("p",null,"@dataclass\nclass MyCheckpointerArguments:"),(0,r.kt)("h1",{id:"args-for-custom-checkpointer-class"},"Args for custom checkpointer class."),(0,r.kt)("p",null,"checkpoint: bool = True\nsave_dir: str = os.path.join(os.getcwd(), ",'"',"checkpoints",'"',")\nmodel_state_save_dir: str = os.path.join(os.getcwd(), ",'"',"checkpoints",'"',")\nload_dir: str = None\nload_filename: str = None\nfile_prefix: str = ",'"',"checkpoint",'"',"\nfile_ext: str = ",'"',"pt",'"'),(0,r.kt)("h1",{id:"implement-abstractcheckpointer"},"Implement AbstractCheckpointer"),(0,r.kt)("p",null,"class MyCheckpointer(AbstractCheckpointer):"),(0,r.kt)("p",null,"def ",(0,r.kt)("strong",{parentName:"p"},"init"),"(self, args):"),(0,r.kt)("h1",{id:"initialize-checkpointer-by-passing-along-args-for-user-configurations"},"Initialize checkpointer by passing along args for user configurations"),(0,r.kt)("h1",{id:"such-as-directory-to-load-or-save-checkpoints-flags-etc"},"such as directory to load or save checkpoints, flags, etc."),(0,r.kt)("p",null,"self.args = args"),(0,r.kt)("p",null,"def save(self, checkpoint_state, index, force=False):"),(0,r.kt)("h1",{id:"trainer-calls-this-method-at-every-epoch-regardless-of-any"},"Trainer calls this method at every epoch, regardless of any"),(0,r.kt)("h1",{id:"arguments-set-and-thus-this-method-should-contain-all-logic-for"},"arguments set, and thus this method should contain all logic for"),(0,r.kt)("h1",{id:"how-where-and-when-a-checkpoint-needs-to-be-saved-when-called-users-can"},"how, where, and when a checkpoint needs to be saved when called. Users can"),(0,r.kt)("h1",{id:"call-any-checkpointers-save-method-at-other-stages-of-the-training-lifecycle"},"call any checkpointer","'","s save method at other stages of the training lifecycle"),(0,r.kt)("h1",{id:"with-the-provided-hooks-and-are-encouraged-to-implement-all"},"with the provided hooks, and are encouraged to implement all"),(0,r.kt)("h1",{id:"checkpointing-logic-here-an-index-argument-is-required-and-can-be"},"checkpointing logic here. An index argument is required, and can be"),(0,r.kt)("h1",{id:"used-to-create-a-unique-name-for-the-file-to-be-saved-or-as-part-of-the"},"used to create a unique name for the file to be saved or as part of the"),(0,r.kt)("h1",{id:"checkpointing-logic-the-optional-force-flag-should-allow-disregarding"},"checkpointing logic. The optional force flag should allow disregarding"),(0,r.kt)("h1",{id:"any-custom-logic-implemented-so-as-to-ensure-trainer-can-save"},"any custom logic implemented, so as to ensure Trainer can save"),(0,r.kt)("h1",{id:"the-last-epoch-when-training-and-checkpointing-is-enabled"},"the last epoch when training and checkpointing is enabled."),(0,r.kt)("h1",{id:"note-that-args-can-be-customized-to-form-save-path-in-any-way-required"},"Note that args can be customized to form save path in any way required"),(0,r.kt)("h1",{id:"where-to-save-the-checkpoint"},"Where to save the checkpoint:"),(0,r.kt)("p",null,"path = os.path.join(self.args.save",(0,r.kt)("em",{parentName:"p"},"dir,\nf",'"',"{self.args.file_prefix}"),"{index}.{self.args.file_ext}",'"',")"),(0,r.kt)("h1",{id:"custom-logic-for-when-to-save-a-checkpoint-here"},"Custom logic for when to save a checkpoint here"),(0,r.kt)("h1",{id:"when-to-save-the-checkpoint"},"When to save the checkpoint:"),(0,r.kt)("p",null,"if index % 5 == 0:"),(0,r.kt)("h1",{id:"how-to-save-the-checkpoint"},"How to save the checkpoint:"),(0,r.kt)("p",null,"torch.save(checkpoint_state, path)"),(0,r.kt)("p",null,"def save_model(self, model_state, index):"),(0,r.kt)("h1",{id:"trainer-will-call-this-at-the-end-of-training"},"Trainer will call this at the end of training."),(0,r.kt)("h1",{id:"an-index-argument-is-required-to-create-a-unique-name-for-the-file"},"An index argument is required to create a unique name for the file"),(0,r.kt)("h1",{id:"to-be-saved"},"to be saved."),(0,r.kt)("h1",{id:"implement-this-method-if-you-wish-to-save-exclusively-the-moduleinterface-model"},"Implement this method if you wish to save exclusively the ModuleInterface (model)"),(0,r.kt)("h1",{id:"state-at-the-end-of-training-as-with-save-this-is-called-automatically-by"},"state at the end of training. As with save(), this is called automatically by"),(0,r.kt)("h1",{id:"trainer-but-can-be-used-at-other-stages-of-the-training-lifecycle-via-hooks"},"Trainer, but can be used at other stages of the training lifecycle via hooks."),(0,r.kt)("p",null,"if self.args.checkpoint and self.args.model",(0,r.kt)("em",{parentName:"p"},"state_save_dir:\npath = os.path.join(self.args.model_state_save_dir,\nf",'"',"{self.args.file_prefix}_model"),"{index}.{self.args.file_ext}",'"',")\ntorch.save(model_state, path)"),(0,r.kt)("p",null,"def load(self):"),(0,r.kt)("h1",{id:"implements-logic-to-load-a-checkpointed-file-always-called"},"Implements logic to load a checkpointed file. Always called"),(0,r.kt)("h1",{id:"upon-initialization-of-trainer-leverage-checkpointer-args"},"upon initialization of Trainer. Leverage checkpointer args"),(0,r.kt)("h1",{id:"to-implement-how-and-from-where-to-load-the-checkpointed-file-and"},"to implement how and from where to load the checkpointed file, and"),(0,r.kt)("h1",{id:"return-the-loaded-checkpoint-to-trainer-trainer-expects-a-checkpoint"},"return the loaded checkpoint to Trainer. Trainer expects a Checkpoint"),(0,r.kt)("h1",{id:"dataclass-instance-returned"},"dataclass instance returned."),(0,r.kt)("p",null,"if self.args.load_dir and self.args.load_filename:\npath = os.path.join(self.args.load_dir,\nself.args.load_filename)\nreturn torch.load(path, map_location=torch.device(","'","cpu","'","))\nelse:\nself.logger.warning(","'","No checkpointer loaded, check load_fir and load_filename are set.","'",")\nreturn Checkpoint()"),(0,r.kt)("h1",{id:"create-instance-of-custom-checkpointer"},"Create instance of custom checkpointer"),(0,r.kt)("p",null,"my_args = MyCheckpointerArguments()\nmy_checkpointer = MyCheckpointer(my_args)"),(0,r.kt)("h1",{id:"pass-along-custom-checkpointer-to-trainer"},"Pass along custom checkpointer to Trainer"),(0,r.kt)("p",null,"trainer = Trainer(module=module_interface,\ntrainer_backend=trainer_backend,\nargs=trainer_args,\ncheckpointer=my_checkpointer)"),(0,r.kt)("p",null,"Recall that these three methods are called automatically by :class:",(0,r.kt)("inlineCode",{parentName:"p"},"~pymarlin.core.trainer.Trainer"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"load()"),": at :class:",(0,r.kt)("inlineCode",{parentName:"li"},"~pymarlin.core.trainer.Trainer")," inicialization, before training."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"save()"),": at the end of every epoch and once more after training with force=True."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"save_model()"),": at the end of training.")),(0,r.kt)("p",null,"Please review the :class:",(0,r.kt)("inlineCode",{parentName:"p"},"~.AbstractCheckpointer")," documentation for precise method signatures for\ncorrectly interfacing with :class:",(0,r.kt)("inlineCode",{parentName:"p"},"~pymarlin.core.trainer.Trainer")," if creating a custom checkpointer."),(0,r.kt)("p",null,"To customize ",(0,r.kt)("em",{parentName:"p"},"what")," is checkpointed as a part of the attributes of :class:",(0,r.kt)("inlineCode",{parentName:"p"},"~.Checkpoint"),", please\noverride the ",(0,r.kt)("strong",{parentName:"p"},"get_state()")," methods at\n:func:",(0,r.kt)("inlineCode",{parentName:"p"},"ModuleInterface.get_state() &lt;pymarlin.core.module_interface.ModuleInterface.get_state&gt;"),",\n:class:",(0,r.kt)("inlineCode",{parentName:"p"},"Trainer.get_state() &lt;pymarlin.core.trainer.Trainer.get_state&gt;")," and\n:class:",(0,r.kt)("inlineCode",{parentName:"p"},"TrainerBackend.get_state() &lt;pymarlin.core.trainer.TrainerBackend.get_state&gt;"),"."),(0,r.kt)("p",null,"For example, for :class:",(0,r.kt)("inlineCode",{parentName:"p"},"Trainer.get_state() &lt;pymarlin.core.trainer.Trainer.get_state&gt;"),":"),(0,r.kt)("p",null,".. code-block:: python"),(0,r.kt)("p",null,"class MyTrainer(Trainer):\ndef ",(0,r.kt)("strong",{parentName:"p"},"init"),"(self, module, args, trainer_backend, checkpointer):\nsuper().",(0,r.kt)("strong",{parentName:"p"},"init"),"(module, args, trainer_backend, checkpointer)"),(0,r.kt)("p",null,"def get_state(self) -",">"," dict:\nstate_dict = {\n",'"',"last_epoch",'"',": self.last_epoch,\n",'"',"optimizers",'"',": ","[optimizer.state_dict() for optimizer in self.optimizers]",",\n",'"',"schedulers",'"',": ","[scheduler.state_dict() for scheduler in self.schedulers]",",\n",'"',"args",'"',": self.args   # Adding something else we want to save\n}\nreturn state_dict"),(0,r.kt)("p",null,"Please remember to also update ",(0,r.kt)("strong",{parentName:"p"},"update_state()")," methods if appropriate."),(0,r.kt)("h2",{id:"defaultcheckpointerarguments-objects"},"DefaultCheckpointerArguments Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass\nclass DefaultCheckpointerArguments()\n")),(0,r.kt)("p",null,"Args for DefaultCheckpointer class."),(0,r.kt)("h2",{id:"abstractcheckpointer-objects"},"AbstractCheckpointer Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class AbstractCheckpointer(ABC)\n")),(0,r.kt)("p",null,"Abstract class for a checkpointer."),(0,r.kt)("p",null,"To create a custom checkpointer, users must implement the abstract\nmethods of this class and pass along an instance to ModuleInterface.\nCustom checkpointers can be used at other stages of the\ntraining lifecycle via callbacks."),(0,r.kt)("h4",{id:"save"},"save"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @abstractmethod\n | save(checkpoint_state: Checkpoint, index: int, force: Optional[bool]) -> None\n")),(0,r.kt)("p",null,"Creates a checkpoint by saving a Checkpoint dataclass containing any\nrelevant states."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"checkpoint_state")," ",(0,r.kt)("em",{parentName:"li"},"Checkpoint")," - Checkpointed states."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"index")," ",(0,r.kt)("em",{parentName:"li"},"int")," - Using epoch as index is suggested."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"force")," ",(0,r.kt)("em",{parentName:"li"},"bool, optional")," - Saves checkpoint regardless of conditions\nif args.checkpoint is set to True. Used to always checkpoint\nmodels after the last epoch.")),(0,r.kt)("h4",{id:"save_model"},"save","_","model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | save_model(model_state: Dict, index: int) -> None\n")),(0,r.kt)("p",null,"Creates a model checkpoint by saving model state."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"model_state")," ",(0,r.kt)("em",{parentName:"li"},"Dict")," - Model state as provided by ModuleInterface."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"index")," ",(0,r.kt)("em",{parentName:"li"},"int")," - Number to use to create a unique filename.\nUsing epoch as index is suggested.")),(0,r.kt)("h4",{id:"load"},"load"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @abstractmethod\n | load() -> Checkpoint\n")),(0,r.kt)("p",null,"Load and return a checkpointed file."),(0,r.kt)("p",null,"Implements logic to load a checkpointed file as configured\nvia args used when constructing the checkpointer object. Always called\nupon initialization of Trainer."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Checkpoint")," - Checkpointed states.")),(0,r.kt)("h2",{id:"defaultcheckpointer-objects"},"DefaultCheckpointer Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class DefaultCheckpointer(AbstractCheckpointer)\n")),(0,r.kt)("p",null,"Default checkpointer implementation, implements AbstractCheckpointer and\ncontains a few helper functions for managing checkpointed files."),(0,r.kt)("p",null,"Must be initialized with DefaultCheckpointerArguments. The argument","'","s values\naffect checkpointing as follows:"),(0,r.kt)("p",null,"checkpoint: Flag indicating whether to checkpoint model when save()\nis called. Other conditions are implemented within save(), allowing this\nmethod to always be called within training loops and abstracting the\ncheckpointing logic out of Trainer and implemented in this class.\ndelete",(0,r.kt)("em",{parentName:"p"},"existing_checkpoints: Flag indicating whether to delete checkpoints\nunder save_dir before training. New checkpoints are saved regardless.\nperiod: Period of index at which to checkpoint model. Evaluates\nindex % period == 0. This function is called with index set to the\nepoch, and thus checkpoints every ",'"',"period",'"'," number of epochs. The last\nepoch is always checkpointed regardless.\nsave_dir: Path to directory where checkpoints are to be stored. Creates\nfolder if it does not exist.\nmodel_state_save_dir: Path to directory where checkpointed models are to\nbe stored. Creates folder if it does not exist.\nload_dir: Path to directory where checkpoints are to be loaded from.\nIf not set, will not attempt to load a checkpoint. If load_filename\nis set, will search for this filename within the directory to load it.\nIf load_filename is not set, will load the file via get_latest_file().\nload_filename: Filename of checkpoint to load under load_dir, overrides\nautomatic loading via get_latest_file().\nfile_prefix: Prefix of the checkpoint filename. Final filename to save\nwill be {file_prefix}"),"{index}.{file",(0,r.kt)("em",{parentName:"p"},"ext}, or in the case of saving with\nsave_model(), {file_prefix}_mode"),"{index}.{file_ext}.\nfile_ext: File extension for the checkpoint filename when saving and when\nsearching under load_dir for loading via get_latest_file().\nWhen cleaning save_dir via delete_existing_checkpoints=True, only files\nwith this extension are considered.\nlog_level: Logging level for checkpointer module (Default: ","'","INFO","'",")."),(0,r.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | __init__(args: DefaultCheckpointerArguments)\n")),(0,r.kt)("p",null,"Initialize checkpointer and delete existing checkpointed files\nunder save_dir if delete_existing_checkpoints is set to True."),(0,r.kt)("h4",{id:"save-1"},"save"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | save(checkpoint_state: Checkpoint, index: int, force=False) -> str\n")),(0,r.kt)("p",null,"Creates a checkpoint by saving a Checkpoint dataclass containing any\nrelevant states as a python Dict."),(0,r.kt)("p",null,"Evaluates conditions and, if met, saves a provided dataclass\nwhich should contain any states that users require to save as\npart of a checkpoint under args.save_dir. An additional index\nargument is required to create a unique name for the file to be\nsaved. The optional force flag will disregard conditions other\nthan the checkpoint flag that enables this behavior. The condition\nfor saving with DefaultCheckpointer is index being a multiple\nof the args.period."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"checkpoint_state")," ",(0,r.kt)("em",{parentName:"li"},"Checkpoint")," - Checkpointed states."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"index")," ",(0,r.kt)("em",{parentName:"li"},"int")," - Number to use to create a unique filename and\nevaluate conditions for checkpointing. Using epoch as index\nis suggested."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"force")," ",(0,r.kt)("em",{parentName:"li"},"bool, optional")," - Saves checkpoint regardless of conditions\nif args.checkpoint is set to True. Used to always checkpoint\nstates after the last epoch.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str")," - Path to checkpointed file.")),(0,r.kt)("h4",{id:"save_model-1"},"save","_","model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | save_model(model_state: Dict, index: int) -> str\n")),(0,r.kt)("p",null,"Checkpoints a model state, leveraging torch.save()."),(0,r.kt)("p",null,"Evaluates if checkpointing is enabled and if a model save directory\nhas been set, and saves a provided model state. An additional index\nargument is required to create a unique name for the file to be\nsaved."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"model_state")," ",(0,r.kt)("em",{parentName:"li"},"Dict")," - Model state as provided by ModuleInterface."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"index")," ",(0,r.kt)("em",{parentName:"li"},"int")," - Number to use to create a unique filename.\nUsing epoch as index is suggested.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str")," - Path to checkpointed file.")),(0,r.kt)("h4",{id:"load-1"},"load"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | load() -> Checkpoint\n")),(0,r.kt)("p",null,"Attempt to load and return a checkpointed file leveraging torch.load().\nThe checkpoined file is assumed to be created with save() and thus be\na python Dict."),(0,r.kt)("p",null,"This method is always called upon initialization of Trainer.\nSearches for and attempts to load a checkpointed file based on\nargs. If no load_dir is set, returns None. If a load_dir and\nload_filename have been set, the file ",'"',"load_filename",'"'," under\nload_dir is directly loaded (the filename must include extension).\nIf only load_dir is set, get_latest_file() is called to seach the\nfolder for the file with the largest integer (index) in its filename,\nand returns that path for loading."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Checkpoint")," - Checkpointed states.")),(0,r.kt)("h4",{id:"get_latest_file"},"get","_","latest","_","file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @staticmethod\n | get_latest_file(load_dir: str, file_prefix: str, file_ext: str = 'pt', logger=getlogger(__name__)) -> str\n")),(0,r.kt)("p",null,"Get the path to the last checkpointed file."),(0,r.kt)("p",null,"Find and return the path of the file with greatest number of\ncompleted epochs under dirpath (recursive search) for a given file\nprefix, and optionally file extension."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"load_dir")," ",(0,r.kt)("em",{parentName:"li"},"str")," - Directory under which to search for\ncheckpointed files."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"file_prefix")," ",(0,r.kt)("em",{parentName:"li"},"str")," - Prefix to match for when searching\nfor candidate files."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"file_ext")," ",(0,r.kt)("em",{parentName:"li"},"str, optional")," - File extension to consider\nwhen searching.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str")," - Path to latest checkpointed file.")),(0,r.kt)("h4",{id:"check_mk_dir"},"check","_","mk","_","dir"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | check_mk_dir(dirpath: str) -> None\n")),(0,r.kt)("p",null,"Check if the path exists, and if it doesn","'","t creates it."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dirpath")," ",(0,r.kt)("em",{parentName:"li"},"str")," - Directory under which to search for\ncheckpointed files.")))}p.isMDXComponent=!0}}]);