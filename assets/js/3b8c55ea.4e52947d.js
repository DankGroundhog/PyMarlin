(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[217],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},872:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p},default:function(){return s}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o={},l={unversionedId:"installation",id:"installation",isDocsHomePage:!1,title:"Installation",description:"In this guide, we will share instructions on how to set up pymarlin in the following environments:",source:"@site/docs/installation.md",sourceDirName:".",slug:"/installation",permalink:"/docs/installation",editUrl:"https://github.com/microsoft/PyMarlin/edit/master/website/docs/installation.md",version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Getting Started",permalink:"/docs/getting-started"},next:{title:"pymarlin in pictures",permalink:"/docs/marlin-in-pictures"}},p=[{value:"Local/Dev Machine",id:"localdev-machine",children:[{value:"Environment setup",id:"environment-setup",children:[]},{value:"Install pytorch",id:"install-pytorch",children:[]}]},{value:"Install pymarlin",id:"install-pymarlin",children:[{value:"Install from pip package",id:"install-from-pip-package",children:[]},{value:"Install from source",id:"install-from-source",children:[]}]},{value:"Docker Image for Public AzureML",id:"docker-image-for-public-azureml",children:[]},{value:"Pip package for Compliant AzureML (Rufous Stage 3)",id:"pip-package-for-compliant-azureml-rufous-stage-3",children:[]},{value:"Docker Image for Compliant AzureML (Rufous Stage 3)",id:"docker-image-for-compliant-azureml-rufous-stage-3",children:[]}],c={toc:p};function s(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In this guide, we will share instructions on how to set up pymarlin in the following environments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Local/Dev Machine"),(0,i.kt)("li",{parentName:"ul"},"Public AzureML"),(0,i.kt)("li",{parentName:"ul"},"Compliant AzureML (Rufous Stage 3)")),(0,i.kt)("h2",{id:"localdev-machine"},"Local/Dev Machine"),(0,i.kt)("h3",{id:"environment-setup"},"Environment setup"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"conda create -n pymarlin python=3.8\nconda activate pymarlin\n")),(0,i.kt)("h3",{id:"install-pytorch"},"Install pytorch"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://pytorch.org/get-started/locally/"},"Latest documentation")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"conda install pytorch cpuonly -c pytorch\n")),(0,i.kt)("h2",{id:"install-pymarlin"},"Install pymarlin"),(0,i.kt)("p",null,"You can install from our internal pip or alternatively install from source."),(0,i.kt)("h3",{id:"install-from-pip-package"},"Install from pip package"),(0,i.kt)("p",null,"This pip package is internal to microsoft employees currently. Hence the index-url needs to be specified. ",(0,i.kt)("inlineCode",{parentName:"p"},"artifacts-keyring")," handles the authentication."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pip install keyring artifacts-keyring #https://github.com/microsoft/artifacts-keyring\n\npip install pymarlin --index-url https://o365exchange.pkgs.visualstudio.com/959adb23-f323-4d52-8203-ff34e5cbeefa/_packaging/ELR/pypi/simple/\n")),(0,i.kt)("h3",{id:"install-from-source"},"Install from source"),(0,i.kt)("p",null,"Alternatively, to get the latest changes, build from the source itself"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git clone https://o365exchange.visualstudio.com/DefaultCollection/O365%20Core/_git/ELR\ngit checkout -b u/elr/refactor\ncd ELR\\sources\\dev\\SubstrateInferences\\pymarlin\npip install -r requirements.txt\n")),(0,i.kt)("h4",{id:"option-1--pip-install"},"Option 1 : pip install"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://medium.com/@arocketman/creating-a-pip-package-on-a-private-repository-using-setuptools-fff608471e39"},"https://medium.com/@arocketman/creating-a-pip-package-on-a-private-repository-using-setuptools-fff608471e39")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pip install .\ncd .. \npython -c 'import pymarlin; print(pymarlin.__path__)'\npython\n\nHello World\n")),(0,i.kt)("h4",{id:"option-2--pythonpath"},"Option 2 : PYTHONPATH"),(0,i.kt)("p",null,"Do this when making changes to the library. Suitable for core folks who work on improving the library."),(0,i.kt)("p",null,"For windows cmd,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"set PYTHONPATH=<full path to ELR\\sources\\dev\\SubstrateInferences\\pymarlin>\n")),(0,i.kt)("h2",{id:"docker-image-for-public-azureml"},"Docker Image for Public AzureML"),(0,i.kt)("p",null,"We have an MSFT-tenant ACR that hosts an AzureML compatible docker image with pymarlin. Here are the instructions for how to link to it in your public AzureML experiment. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'from azureml.core.environment import Environment\n# Create the environment\npymarlinenv = Environment(name="pymarlinenv")\n# Enable Docker and reference an image\npymarlinenv.docker.enabled = True\n# Set the container registry information, password subject to change, reach out to josleep@ for latest.\npymarlinenv.docker.base_image = "pymarlin:latest"\npymarlinenv.docker.base_image_registry.address = "elrsubstrate.azurecr.io"\npymarlinenv.docker.base_image_registry.username = "elrsubstrate"\npymarlinenv.docker.base_image_registry.password = "reach out to josleep@ for password"\n')),(0,i.kt)("h2",{id:"pip-package-for-compliant-azureml-rufous-stage-3"},"Pip package for Compliant AzureML (Rufous Stage 3)"),(0,i.kt)("p",null,"When experimenting in Compliant AzureML, you can add any packages in the Polymer package feed to your conda environment. See an example in our own repo ",(0,i.kt)("a",{parentName:"p",href:"https://o365exchange.visualstudio.com/O365%20Core/_git/ELR?path=%2Fsources%2Fdev%2FSubstrateInferences%2Fpymarlin_Scenarios%2Ftest_hfseqclass%2Fconda_env.yaml&version=GBu%2Fjosleep%2Frufous-pipeline&line=9&lineEnd=10&lineStartColumn=1&lineEndColumn=105&lineStyle=plain&_a=contents"},"here")," for how to add pymarlin as a dependecy in your module's conda environment file."),(0,i.kt)("h2",{id:"docker-image-for-compliant-azureml-rufous-stage-3"},"Docker Image for Compliant AzureML (Rufous Stage 3)"),(0,i.kt)("p",null,"polymerprod.azurecr.io/polymercd/prod_official/pymarlin:1.0.0"))}s.isMDXComponent=!0}}]);