(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[12],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9288:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return p},toc:function(){return l},default:function(){return u}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o={},p={unversionedId:"readme",id:"readme",isDocsHomePage:!1,title:"readme",description:"Webapp",source:"@site/docs/readme.md",sourceDirName:".",slug:"/readme",permalink:"/PyMarlin/docs/readme",editUrl:"https://github.com/microsoft/PyMarlin/edit/master/website/docs/readme.md",version:"current",frontMatter:{}},l=[{value:"Webapp",id:"webapp",children:[{value:"Contribution",id:"contribution",children:[]},{value:"Setup",id:"setup",children:[]}]}],s={toc:l};function u(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"webapp"},"Webapp"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We use sphinx to generate our documentation"),(0,i.kt)("li",{parentName:"ul"},"We use Azure webapps to host it")),(0,i.kt)("h3",{id:"contribution"},"Contribution"),(0,i.kt)("p",null,"Most of the process is automated by CI/CD pipeline:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Build docstrings"),(0,i.kt)("li",{parentName:"ul"},"Builds the html files")),(0,i.kt)("p",null,"There are a few things to understand how to contribute."),(0,i.kt)("h4",{id:"the-layout"},"The layout"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"webapp/\n    index.rst  # this is the master table of contents\n    conf.py  # configuration for sphinx\n    source/  # directory where docstring files are automatically generated by sphinx\n    example.md  # markdown or rst files can be included here\n    ...  # other files can largely be ignored\n")),(0,i.kt)("h4",{id:"how-to-add-a-new-file"},"How to add a new file"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a new file e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"webapp/example.md")," (You can also use ",(0,i.kt)("inlineCode",{parentName:"p"},".rst")," if you like)")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add this to the ",(0,i.kt)("inlineCode",{parentName:"p"},"index.rst")," file"),(0,i.kt)("p",{parentName:"li"},"You can add it to an existing section, or create a new one."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-rst"},".. toctree::\n    :maxdepth: 1\n    :caption: New Section\n\n    example\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"(Optional) Test your changes locally."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Set up a python environment as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"conda create --name pymarlin-sphinx python=3.8\nconda activate pymarlin-sphinx\npip install -r requirements.txt  # pymarlin requirements\npip install -r docs/webapp/requirements.txt  # sphinx requirements\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"To test your changes locally run ",(0,i.kt)("inlineCode",{parentName:"p"},"make html"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd webapp\nmake html\n")),(0,i.kt)("p",{parentName:"li"},"  This will update the html files in ",(0,i.kt)("inlineCode",{parentName:"p"},"webapp/_build/html"),". You can open these\nfiles in your browser to observe the changes / behavior.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Push your changes to master branch - the build pipeline will take care of the\nrest, i.e., it will push the changes to the webapp."))),(0,i.kt)("h4",{id:"adding-nested-pages"},"Adding nested pages"),(0,i.kt)("p",null,"If you want to add multiple pages under a single section in the docs that is\npossible."),(0,i.kt)("p",null,"For example, in the ",(0,i.kt)("inlineCode",{parentName:"p"},"index.rst")," file we declare a section ",(0,i.kt)("inlineCode",{parentName:"p"},"Scenarios"),". Suppose\nyou want to add a new scenario ",(0,i.kt)("inlineCode",{parentName:"p"},"BART")," with multiple subpages:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"bart1.md"),(0,i.kt)("li",{parentName:"ul"},"bart2.md")),(0,i.kt)("p",null,"To do this create a page ",(0,i.kt)("inlineCode",{parentName:"p"},"bart-index.rst")," as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rst"},"BART Scenario\n\n.. toctree::\n   :maxdepth: 1\n   :caption: BART Scenario:\n\n   bart1\n   bart2\n")),(0,i.kt)("p",null,"Then add this to the ",(0,i.kt)("inlineCode",{parentName:"p"},"index.rst")," file, e.g.:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},".. toctree::\n   :maxdepth: 1\n   :caption: Scenarios\n\n   scenarios\n   bart-index\n")),(0,i.kt)("h3",{id:"setup"},"Setup"),(0,i.kt)("p",null,"This describes how this was setup."),(0,i.kt)("p",null,"Run quickstart to generate sphinx project scaffolding:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd docs/webapp\nsphinx-quickstart\n")),(0,i.kt)("p",null,"This will create ",(0,i.kt)("inlineCode",{parentName:"p"},"conf.py")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"index.rst")," (among other things)."),(0,i.kt)("p",null,"Update ",(0,i.kt)("inlineCode",{parentName:"p"},"conf.py")," with the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import os\nimport sys\nPATH_HERE = os.path.abspath(os.path.dirname(__file__))\nPATH_ROOT = os.path.join(PATH_HERE, '..', '..')\nsys.path.insert(0, os.path.abspath(PATH_ROOT))\n\nextensions = [\n    'sphinx.ext.napoleon',\n    'sphinx.ext.autodoc',\n    ... # added a bunch of extensions\n]\n\nnapoleon_google_docstring = True\n\nhtml_theme = 'sphinx_rtd_theme'\n")),(0,i.kt)("p",null,"Update the ",(0,i.kt)("inlineCode",{parentName:"p"},"index.rst")," file to have the desired layout for the homepage."),(0,i.kt)("p",null,"Now to generate the documentation run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd webapp\nsphinx-apidoc -o source ../../pymarlin\n")),(0,i.kt)("p",null,"This will scan ",(0,i.kt)("inlineCode",{parentName:"p"},"../../pymarlin")," for python modules and put their docstrings\nin ",(0,i.kt)("inlineCode",{parentName:"p"},"docs/webapp/source"),". You can see a bunch of ",(0,i.kt)("inlineCode",{parentName:"p"},".rst")," files in there now."),(0,i.kt)("p",null,"To build the html files manually you run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"make html\n")),(0,i.kt)("p",null,"This creates the html files in ",(0,i.kt)("inlineCode",{parentName:"p"},"docs/webapp/_build/html"),"."),(0,i.kt)("p",null,"Finally, to manually push these files to the azure webapp:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd _build/html\naz webapp up --name pymarlin-docs --html\n")),(0,i.kt)("p",null,"Note: Very rarely the ",(0,i.kt)("inlineCode",{parentName:"p"},"az webapp up")," command might fail transiently - just re-run."))}u.isMDXComponent=!0}}]);