(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8389],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return f}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),f=l,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||r;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1399:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return o},toc:function(){return s},default:function(){return u}});var a=n(2122),l=n(9756),r=(n(7294),n(3905)),i={sidebar_label:"module_classes",title:"plugins.hf_seq_classification.module_classes"},o={unversionedId:"reference/plugins/hf_seq_classification/module_classes",id:"reference/plugins/hf_seq_classification/module_classes",isDocsHomePage:!1,title:"plugins.hf_seq_classification.module_classes",description:"HfSeqClassificationModule Objects",source:"@site/docs/reference/plugins/hf_seq_classification/module_classes.md",sourceDirName:"reference/plugins/hf_seq_classification",slug:"/reference/plugins/hf_seq_classification/module_classes",permalink:"/PyMarlin/docs/reference/plugins/hf_seq_classification/module_classes",editUrl:"https://github.com/microsoft/PyMarlin/edit/master/website/docs/reference/plugins/hf_seq_classification/module_classes.md",version:"current",sidebar_label:"module_classes",frontMatter:{sidebar_label:"module_classes",title:"plugins.hf_seq_classification.module_classes"},sidebar:"referenceSideBar",previous:{title:"plugins.hf_seq_classification.implementation",permalink:"/PyMarlin/docs/reference/plugins/hf_seq_classification/implementation"},next:{title:"plugins.base",permalink:"/PyMarlin/docs/reference/plugins/base"}},s=[{value:"HfSeqClassificationModule Objects",id:"hfseqclassificationmodule-objects",children:[]}],c={toc:s};function u(e){var t=e.components,n=(0,l.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"hfseqclassificationmodule-objects"},"HfSeqClassificationModule Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class HfSeqClassificationModule(module_interface.ModuleInterface)\n")),(0,r.kt)("p",null,"Task specific ModuleInterface used with a trainer.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"model")," properties must be set."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ModuleInterface")," ",(0,r.kt)("em",{parentName:"li"},"[type]")," - ","[description]")),(0,r.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | __init__(args)\n")),(0,r.kt)("p",null,"Initialize training module."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"args")," ",(0,r.kt)("em",{parentName:"li"},"arguments.ModuleArguments")," - Dataclass")),(0,r.kt)("h4",{id:"data"},"data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | data()\n")),(0,r.kt)("p",null,"DataInterface object that is used to retrieve corresponding train or val dataset."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data")," ",(0,r.kt)("em",{parentName:"li"},"data_interface.DataInterface")," - DataInterface object with at least one of train or val data.")),(0,r.kt)("h4",{id:"model"},"model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | model()\n")),(0,r.kt)("p",null,"Pytorch model."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  model (torch.nn.Module)"),(0,r.kt)("h4",{id:"setup_model"},"setup","_","model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | setup_model(automodel_class)\n")),(0,r.kt)("p",null,"Initializes ",(0,r.kt)("inlineCode",{parentName:"p"},"HfSeqClassificationModule.model")," weights:\nOption 1: Load weights from specified files mentioned in YAML config\nmodel:\nmodel_config_path\nmodel_config_file\nmodel_path\nmodel_file\nOption 2: Load from Huggingface model hub, specify string in YAML config as:\nmodel:\nhf_model\nIf distill_args.enable = True\nstudent = ",(0,r.kt)("inlineCode",{parentName:"p"},"HfSeqClassificationModule.model"),"\nteacher = ",(0,r.kt)("inlineCode",{parentName:"p"},"HfSeqClassificationModule.teacher")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"automodel_class")," - Huggingface AutoModelForSequenceClassificaton class")),(0,r.kt)("h4",{id:"on_end_val_epoch"},"on","_","end","_","val","_","epoch"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},' | @rank_zero_only\n | on_end_val_epoch(global_step, *values, *, key="default")\n')),(0,r.kt)("p",null,"Compute metrics at the end of each val epoch. Metric function is specified by args.metric.\nvalues contains all values returned by val_step all_gathered over all processes and all steps"))}u.isMDXComponent=!0}}]);