(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[791],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1384:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o={},l={unversionedId:"examples/datamodule-example",id:"examples/datamodule-example",isDocsHomePage:!1,title:"Data interface single and multi process",description:"This is an example explaining how to leverage the in-built multiprocessing capability of DataInterface for large amounts of data.",source:"@site/docs/examples/datamodule-example.md",sourceDirName:"examples",slug:"/examples/datamodule-example",permalink:"/docs/examples/datamodule-example",editUrl:"https://github.com/microsoft/PyMarlin/edit/master/website/docs/examples/datamodule-example.md",version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"CIFAR image classification",permalink:"/docs/examples/cifar"},next:{title:"Distillation",permalink:"/docs/examples/distillation"}},s=[{value:"Configs - YAML and Parsing",id:"configs---yaml-and-parsing",children:[]},{value:"Virtual machine",id:"virtual-machine",children:[{value:"Single virtual machine with multi process",id:"single-virtual-machine-with-multi-process",children:[]},{value:"Selective node preprocessing",id:"selective-node-preprocessing",children:[]},{value:"AML",id:"aml",children:[]}]}],c={toc:s};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This is an example explaining how to leverage the in-built multiprocessing capability of DataInterface for large amounts of data.\nFor example purpose we are using 27 files from wikipedia raw text.\n1) Azure virtual machine , single node multi-process , single selective machine\n2) AML, single node vs multi-node, single selective machine"),(0,i.kt)("h2",{id:"configs---yaml-and-parsing"},"Configs - YAML and Parsing"),(0,i.kt)("p",null,"For ease of use we have configs passed in as YAML files.\nIn this case we use the config file : config_prod.yaml included with example code."),(0,i.kt)("p",null,"Snippet of config:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"input_dir: 'C:/Users/ashwinsr/wikipedia.part1'\nout_dir: 'C:/Users/ashwinsr/out_fold'\nprocess_count: 10\nrun_type: ''\n")),(0,i.kt)("p",null,"This config can be read in like below : "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"#Create arg parser and read config\nparser = CustomArgParser(log_level='DEBUG', default_yamlfile=\"config_prod.yaml\")\nconfig = parser.parse()\n")),(0,i.kt)("p",null,"Our data processor is a simple token splitter which given raw text will split it into token store the results back in a file. The processor runs 1 file at a time."),(0,i.kt)("h2",{id:"virtual-machine"},"Virtual machine"),(0,i.kt)("h3",{id:"single-virtual-machine-with-multi-process"},"Single virtual machine with multi process"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'dataInterface = Ex_dataInterface()  \nfile_list = dataInterface.get_file_names(config["input_dir"])\n#create and run processor1\nexample_processor = Processor1(config["input_dir"], config["out_dir"])\nout = dataInterface.multi_process_data(example_processor, file_list, process_count=config["process_count"])\n')),(0,i.kt)("p",null,"Here we create a list of files in the directory and initialize the processor with the input and output directory. When calling the multi_process_data function in DataInterface we pass the list of files , with the process count. The DataInterface then spins up those many number of processes to create coressponding output. "),(0,i.kt)("h3",{id:"selective-node-preprocessing"},"Selective node preprocessing"),(0,i.kt)("p",null,"For a case where we have a single node but want to process the data in batches. We want the processor to run on different subset of files depending upon the rank we assign. This is to emulate multi-node behaviour with a single node by controlling the node rank parameter."),(0,i.kt)("p",null,"For instance if we have 30 files to process over 5 separate runs , then we need to add the following to config and initialize dataInterface accordingly"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"distribArgs:\n    local_rank:  0\n    global_rank:  0\n    world_size:  1\n    node_count:  5\n    local_size:  1\n    node_rank: 3\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'distrib = DistributedPreprocessArguments(**config["distribArgs"])\ndataInterface = Ex_dataInterface(distrib)\n')),(0,i.kt)("p",null,"With the above setting we would process files 18-24 out of 30. Since the node_rank is 3 (0 indexed) and can be a maximum of 4. node_count gives us a count of total nodes available\nThis gives a flexibility with large data processing with limited compute."),(0,i.kt)("p",null,"To run in virtual machine copy over the files to virtual machine using SCP\nInstall pymarlin and requirements and run example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"    > ssh $user@$machine -p $port\n    $ pip install  ./pymarlin --force-reinstall\n    $ pip install -r pymarlin/requirements.txt\n    $ cd data_ex\n    $ python data.py\n")),(0,i.kt)("h3",{id:"aml"},"AML"),(0,i.kt)("p",null,"We can do single and multi-node processing both with AML. The datamodule handles AML ranking internally for both single and multinodes to appropriately divide the files across nodes.\nYou will find a notebook along with the example to submit a AML a job, with placeholders for storage and compute accounts."))}p.isMDXComponent=!0}}]);