(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2065],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=l,f=d["".concat(u,".").concat(m)]||d[m]||s[m]||o;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,a=new Array(o);a[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:l,a[1]=i;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3980:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return i},toc:function(){return u},default:function(){return p}});var r=n(2122),l=n(9756),o=(n(7294),n(3905)),a={sidebar_label:"plugin_module_interface",title:"plugins.plugin_module_interface"},i={unversionedId:"reference/plugins/plugin_module_interface",id:"reference/plugins/plugin_module_interface",isDocsHomePage:!1,title:"plugins.plugin_module_interface",description:"plugin module interface",source:"@site/docs/reference/plugins/plugin_module_interface.md",sourceDirName:"reference/plugins",slug:"/reference/plugins/plugin_module_interface",permalink:"/docs/reference/plugins/plugin_module_interface",editUrl:"https://github.com/microsoft/PyMarlin/edit/master/website/docs/reference/plugins/plugin_module_interface.md",version:"current",sidebar_label:"plugin_module_interface",frontMatter:{sidebar_label:"plugin_module_interface",title:"plugins.plugin_module_interface"},sidebar:"referenceSideBar",previous:{title:"plugins.base",permalink:"/docs/reference/plugins/base"},next:{title:"utils.checkpointer.checkpoint_utils",permalink:"/docs/reference/utils/checkpointer/checkpoint_utils"}},u=[{value:"PluginModuleInterface Objects",id:"pluginmoduleinterface-objects",children:[]}],c={toc:u};function p(e){var t=e.components,n=(0,l.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"plugin module interface"),(0,o.kt)("h2",{id:"pluginmoduleinterface-objects"},"PluginModuleInterface Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class PluginModuleInterface(module_interface.ModuleInterface)\n")),(0,o.kt)("p",null,"Common plugin module interface to easily load Huggingface tokenizers and Configs"),(0,o.kt)("h4",{id:"auto_setup"},"auto","_","setup"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | auto_setup(automodel_class)\n")),(0,o.kt)("p",null,"Run all (tokenizer,config,model) setups"),(0,o.kt)("h4",{id:"data"},"data"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | data()\n")),(0,o.kt)("p",null,"DataInterface object that is used to retrieve corresponding train or val dataset."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"data")," - DataInterface object with at least one of train or val data.")),(0,o.kt)("h4",{id:"model"},"model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | model()\n")),(0,o.kt)("p",null,"Pytorch model."),(0,o.kt)("h4",{id:"setup_tokenizer"},"setup","_","tokenizer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | setup_tokenizer()\n")),(0,o.kt)("p",null,"Initializes AutoTokenizer from\nmodel_args.tokenizer_path or model_args.hf_model string"),(0,o.kt)("h4",{id:"setup_model_config"},"setup","_","model","_","config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | setup_model_config()\n")),(0,o.kt)("p",null,"Initializes AutoConfig from\nmodel_args.model_config + model_args.model_config_file path or model_args.hf_model string"),(0,o.kt)("h4",{id:"setup_model"},"setup","_","model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | setup_model(automodel_class)\n")),(0,o.kt)("p",null,"Initializes automodel_class arg by either:\nOption 1: Load weights from specified files mentioned in YAML config\nmodel:\nmodel_config_path\nmodel_config_file\nmodel_path\nmodel_file\nOption 2: Load from Huggingface model hub, specify string in YAML config as:\nmodel:\nhf_model"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"automodel_class")," - Huggingface AutoModelFor* class")))}p.isMDXComponent=!0}}]);