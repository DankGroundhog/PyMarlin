(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6185],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return u},kt:function(){return m}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=l(t),m=a,g=f["".concat(c,".").concat(m)]||f[m]||p[m]||o;return t?n.createElement(g,i(i({ref:r},u),{},{components:t})):n.createElement(g,i({ref:r},u))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2563:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var n=t(2122),a=t(9756),o=(t(7294),t(3905)),i={sidebar_label:"custom_arg_parser",title:"utils.config_parser.custom_arg_parser"},s={unversionedId:"reference/utils/config_parser/custom_arg_parser",id:"reference/utils/config_parser/custom_arg_parser",isDocsHomePage:!1,title:"utils.config_parser.custom_arg_parser",description:"Custom Arguments Parser",source:"@site/docs/reference/utils/config_parser/custom_arg_parser.md",sourceDirName:"reference/utils/config_parser",slug:"/reference/utils/config_parser/custom_arg_parser",permalink:"/docs/reference/utils/config_parser/custom_arg_parser",editUrl:"https://github.com/microsoft/PyMarlin/edit/master/website/docs/reference/utils/config_parser/custom_arg_parser.md",version:"current",sidebar_label:"custom_arg_parser",frontMatter:{sidebar_label:"custom_arg_parser",title:"utils.config_parser.custom_arg_parser"},sidebar:"referenceSideBar",previous:{title:"utils.checkpointer.checkpoint_utils",permalink:"/docs/reference/utils/checkpointer/checkpoint_utils"},next:{title:"utils.logger.logging_utils",permalink:"/docs/reference/utils/logger/logging_utils"}},c=[{value:"CustomArgParser Objects",id:"customargparser-objects",children:[]}],l={toc:c};function u(e){var r=e.components,t=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Custom Arguments Parser"),(0,o.kt)("h2",{id:"customargparser-objects"},"CustomArgParser Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class CustomArgParser()\n")),(0,o.kt)("h4",{id:"parse"},"parse"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | parse() -> Dict\n")),(0,o.kt)("p",null,"Parse YAML config file, parse commandline arguments and merge the two\nto get the final merged config dictionary."),(0,o.kt)("p",null,"Find and return the path of the file with greatest number of\ncompleted epochs under dirpath (recursive search) for a given file\nprefix, and optionally file extension."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("p",null,"  self"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"self._config")," ",(0,o.kt)("em",{parentName:"li"},"Dict")," - merged config dictionary containing all arguments.")))}u.isMDXComponent=!0}}]);