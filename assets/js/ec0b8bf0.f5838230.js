(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[185],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return u},kt:function(){return f}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},u=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(t),f=a,g=m["".concat(l,".").concat(f)]||m[f]||p[f]||i;return t?n.createElement(g,o(o({ref:r},u),{},{components:t})):n.createElement(g,o({ref:r},u))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2563:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return l},default:function(){return u}});var n=t(2122),a=t(9756),i=(t(7294),t(3905)),o={sidebar_label:"custom_arg_parser",title:"utils.config_parser.custom_arg_parser"},s={unversionedId:"reference/utils/config_parser/custom_arg_parser",id:"reference/utils/config_parser/custom_arg_parser",isDocsHomePage:!1,title:"utils.config_parser.custom_arg_parser",description:"Custom Arguments Parser",source:"@site/docs/reference/utils/config_parser/custom_arg_parser.md",sourceDirName:"reference/utils/config_parser",slug:"/reference/utils/config_parser/custom_arg_parser",permalink:"/docs/reference/utils/config_parser/custom_arg_parser",editUrl:"https://github.com/microsoft/PyMarlin/edit/master/website/docs/reference/utils/config_parser/custom_arg_parser.md",version:"current",sidebar_label:"custom_arg_parser",frontMatter:{sidebar_label:"custom_arg_parser",title:"utils.config_parser.custom_arg_parser"},sidebar:"referenceSideBar",previous:{title:"utils.checkpointer.checkpoint_utils",permalink:"/docs/reference/utils/checkpointer/checkpoint_utils"},next:{title:"utils.logger.logging_utils",permalink:"/docs/reference/utils/logger/logging_utils"}},l=[{value:"CustomArgParser Objects",id:"customargparser-objects",children:[]}],c={toc:l};function u(e){var r=e.components,t=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Custom Arguments Parser"),(0,i.kt)("h2",{id:"customargparser-objects"},"CustomArgParser Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class CustomArgParser()\n")),(0,i.kt)("p",null,"This class is part of utils and is provided to load arguments from the provided YAML config file.\nFurther, the default values of arguments from config file can be overridden via command line.\nThe class instance takes in the parser object and optional log_level.\nThis class needed to be instantiated in the main method inside the ELR_Scenario code."),(0,i.kt)("p",null,"'","'","Example for instantiation","'","'",":\nparser = CustomArgParser()\nconfig = parser.parse()"),(0,i.kt)("p",null,"The command line arguments to override default YAML config values are passed by adding a ","'",".","'"," between\nnamespace and the specific argument as shown in example below. If no namespace is present, then just\npass the argument name. All command line arguments are optional and need to be prefixed with ","'","--","'",".\nAll commandline arguments not present in YAML config file will be ignored with a warning message.\nExample commandline override:\npython train.py --tmgr.epochs 4 --chkp.save_dir ",'"',"tmp\\checkpoints",'"'),(0,i.kt)("p",null,"NOTE:\nSupported types for CustomArgParser are int, float, str, lists. null is inferred implicitly as str.\nIf you intend to use other types, then please set a dummy default value in YAML file and pass the\nintended value from commandline. Suggested defaults:\nstr: null\nint: -1\nfloat: -1.0\nbool: pick either True or False\nlist","[int]",": ","[-1, -1, -1]","\nlist","[float]"," : ","[-1.0, -1.0, -1.0]"),(0,i.kt)("h4",{id:"parse"},"parse"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"}," | parse() -> Dict\n")),(0,i.kt)("p",null,"Parse YAML config file, parse commandline arguments and merge the two\nto get the final merged config dictionary."),(0,i.kt)("p",null,"Find and return the path of the file with greatest number of\ncompleted epochs under dirpath (recursive search) for a given file\nprefix, and optionally file extension."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("p",null,"  self"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"self._config")," ",(0,i.kt)("em",{parentName:"li"},"Dict")," - merged config dictionary containing all arguments.")))}u.isMDXComponent=!0}}]);