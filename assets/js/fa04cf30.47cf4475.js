(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7295],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return o},kt:function(){return k}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),u=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},o=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),m=u(r),k=a,g=m["".concat(p,".").concat(k)]||m[k]||c[k]||l;return r?n.createElement(g,i(i({ref:t},o),{},{components:r})):n.createElement(g,i({ref:t},o))}));function k(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,i=new Array(l);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<l;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3915:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return p},default:function(){return o}});var n=r(2122),a=r(9756),l=(r(7294),r(3905)),i={sidebar_label:"sequence_labelling_metrics",title:"plugins.ner_plugin.sequence_labelling_metrics"},s={unversionedId:"reference/plugins/ner_plugin/sequence_labelling_metrics",id:"reference/plugins/ner_plugin/sequence_labelling_metrics",isDocsHomePage:!1,title:"plugins.ner_plugin.sequence_labelling_metrics",description:"Metrics to assess performance on sequence labeling task given prediction",source:"@site/docs/reference/plugins/ner_plugin/sequence_labelling_metrics.md",sourceDirName:"reference/plugins/ner_plugin",slug:"/reference/plugins/ner_plugin/sequence_labelling_metrics",permalink:"/docs/reference/plugins/ner_plugin/sequence_labelling_metrics",editUrl:"https://github.com/microsoft/PyMarlin/edit/master/website/docs/reference/plugins/ner_plugin/sequence_labelling_metrics.md",version:"current",sidebar_label:"sequence_labelling_metrics",frontMatter:{sidebar_label:"sequence_labelling_metrics",title:"plugins.ner_plugin.sequence_labelling_metrics"},sidebar:"referenceSideBar",previous:{title:"plugins.ner_plugin.module_classes",permalink:"/docs/reference/plugins/ner_plugin/module_classes"},next:{title:"plugins.base",permalink:"/docs/reference/plugins/base"}},p=[],u={toc:p};function o(e){var t=e.components,r=(0,a.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Metrics to assess performance on sequence labeling task given prediction\nFunctions named as ",(0,l.kt)("inlineCode",{parentName:"p"},"*_score")," return a scalar value to maximize: the higher\nthe better"),(0,l.kt)("h4",{id:"get_entities"},"get","_","entities"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"get_entities(seq, suffix=False)\n")),(0,l.kt)("p",null,"Gets entities from sequence."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"seq")," ",(0,l.kt)("em",{parentName:"li"},"list")," - sequence of labels.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list")," - list of (chunk_type, chunk_start, chunk_end).")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("p",null,"  ",">",">",">"," from seqeval.metrics.sequence_labeling import get_entities\n",">",">",">"," seq = ","['","B-PER","'",", ","'","I-PER","'",", ","'","O","'",", ","'","B-LOC","']","\n",">",">",">"," get_entities(seq)\n","[(","'","PER","'",", 0, 1), (","'","LOC","'",", 3, 3)]"),(0,l.kt)("h4",{id:"end_of_chunk"},"end","_","of","_","chunk"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"end_of_chunk(prev_tag, tag, prev_type, type_)\n")),(0,l.kt)("p",null,"Checks if a chunk ended between the previous and current word."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"prev_tag")," - previous chunk tag."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"tag")," - current chunk tag."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"prev_type")," - previous type."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"type_")," - current type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"chunk_end")," - boolean.")),(0,l.kt)("h4",{id:"start_of_chunk"},"start","_","of","_","chunk"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"start_of_chunk(prev_tag, tag, prev_type, type_)\n")),(0,l.kt)("p",null,"Checks if a chunk started between the previous and current word."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"prev_tag")," - previous chunk tag."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"tag")," - current chunk tag."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"prev_type")," - previous type."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"type_")," - current type.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"chunk_start")," - boolean.")),(0,l.kt)("h4",{id:"f1_score"},"f1","_","score"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'f1_score(y_true, y_pred, average="micro", suffix=False)\n')),(0,l.kt)("p",null,"Compute the F1 score.\nThe F1 score can be interpreted as a weighted average of the precision and\nrecall, where an F1 score reaches its best value at 1 and worst score at 0.\nThe relative contribution of precision and recall to the F1 score are\nequal. The formula for the F1 score is::\nF1 = 2 ",(0,l.kt)("em",{parentName:"p"}," (precision ")," recall) / (precision + recall)"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("p",null,"  y_true : 2d array. Ground truth (correct) target values.\ny_pred : 2d array. Estimated targets as returned by a tagger."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  score : float."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("p",null,"  ",">",">",">"," from seqeval.metrics import f1_score\n",">",">",">"," y_true = [","['","O","'",", ","'","O","'",", ","'","O","'",", ","'","B-MISC","'",", ","'","I-MISC","'",", ","'","I-MISC","'",", ","'","O","']",", ","['","B-PER","'",", ","'","I-PER","'",", ","'","O","']","]\n",">",">",">"," y_pred = [","['","O","'",", ","'","O","'",", ","'","B-MISC","'",", ","'","I-MISC","'",", ","'","I-MISC","'",", ","'","I-MISC","'",", ","'","O","']",", ","['","B-PER","'",", ","'","I-PER","'",", ","'","O","']","]\n",">",">",">"," f1_score(y_true, y_pred)\n0.50"),(0,l.kt)("h4",{id:"accuracy_score"},"accuracy","_","score"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"accuracy_score(y_true, y_pred)\n")),(0,l.kt)("p",null,"Accuracy classification score.\nIn multilabel classification, this function computes subset accuracy:\nthe set of labels predicted for a sample must ",(0,l.kt)("em",{parentName:"p"},"exactly")," match the\ncorresponding set of labels in y_true."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("p",null,"  y_true : 2d array. Ground truth (correct) target values.\ny_pred : 2d array. Estimated targets as returned by a tagger."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  score : float."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("p",null,"  ",">",">",">"," from seqeval.metrics import accuracy_score\n",">",">",">"," y_true = [","['","O","'",", ","'","O","'",", ","'","O","'",", ","'","B-MISC","'",", ","'","I-MISC","'",", ","'","I-MISC","'",", ","'","O","']",", ","['","B-PER","'",", ","'","I-PER","'",", ","'","O","']","]\n",">",">",">"," y_pred = [","['","O","'",", ","'","O","'",", ","'","B-MISC","'",", ","'","I-MISC","'",", ","'","I-MISC","'",", ","'","I-MISC","'",", ","'","O","']",", ","['","B-PER","'",", ","'","I-PER","'",", ","'","O","']","]\n",">",">",">"," accuracy_score(y_true, y_pred)\n0.80"),(0,l.kt)("h4",{id:"precision_score"},"precision","_","score"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'precision_score(y_true, y_pred, average="micro", suffix=False)\n')),(0,l.kt)("p",null,"Compute the precision.\nThe precision is the ratio ",(0,l.kt)("inlineCode",{parentName:"p"},"tp / (tp + fp)")," where ",(0,l.kt)("inlineCode",{parentName:"p"},"tp")," is the number of\ntrue positives and ",(0,l.kt)("inlineCode",{parentName:"p"},"fp")," the number of false positives. The precision is\nintuitively the ability of the classifier not to label as positive a sample.\nThe best value is 1 and the worst value is 0."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("p",null,"  y_true : 2d array. Ground truth (correct) target values.\ny_pred : 2d array. Estimated targets as returned by a tagger."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  score : float."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("p",null,"  ",">",">",">"," from seqeval.metrics import precision_score\n",">",">",">"," y_true = [","['","O","'",", ","'","O","'",", ","'","O","'",", ","'","B-MISC","'",", ","'","I-MISC","'",", ","'","I-MISC","'",", ","'","O","']",", ","['","B-PER","'",", ","'","I-PER","'",", ","'","O","']","]\n",">",">",">"," y_pred = [","['","O","'",", ","'","O","'",", ","'","B-MISC","'",", ","'","I-MISC","'",", ","'","I-MISC","'",", ","'","I-MISC","'",", ","'","O","']",", ","['","B-PER","'",", ","'","I-PER","'",", ","'","O","']","]\n",">",">",">"," precision_score(y_true, y_pred)\n0.50"),(0,l.kt)("h4",{id:"recall_score"},"recall","_","score"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'recall_score(y_true, y_pred, average="micro", suffix=False)\n')),(0,l.kt)("p",null,"Compute the recall.\nThe recall is the ratio ",(0,l.kt)("inlineCode",{parentName:"p"},"tp / (tp + fn)")," where ",(0,l.kt)("inlineCode",{parentName:"p"},"tp")," is the number of\ntrue positives and ",(0,l.kt)("inlineCode",{parentName:"p"},"fn")," the number of false negatives. The recall is\nintuitively the ability of the classifier to find all the positive samples.\nThe best value is 1 and the worst value is 0."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("p",null,"  y_true : 2d array. Ground truth (correct) target values.\ny_pred : 2d array. Estimated targets as returned by a tagger."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  score : float."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("p",null,"  ",">",">",">"," from seqeval.metrics import recall_score\n",">",">",">"," y_true = [","['","O","'",", ","'","O","'",", ","'","O","'",", ","'","B-MISC","'",", ","'","I-MISC","'",", ","'","I-MISC","'",", ","'","O","']",", ","['","B-PER","'",", ","'","I-PER","'",", ","'","O","']","]\n",">",">",">"," y_pred = [","['","O","'",", ","'","O","'",", ","'","B-MISC","'",", ","'","I-MISC","'",", ","'","I-MISC","'",", ","'","I-MISC","'",", ","'","O","']",", ","['","B-PER","'",", ","'","I-PER","'",", ","'","O","']","]\n",">",">",">"," recall_score(y_true, y_pred)\n0.50"),(0,l.kt)("h4",{id:"performance_measure"},"performance","_","measure"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"performance_measure(y_true, y_pred)\n")),(0,l.kt)("p",null,"Compute the performance metrics: TP, FP, FN, TN"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("p",null,"  y_true : 2d array. Ground truth (correct) target values.\ny_pred : 2d array. Estimated targets as returned by a tagger."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  performance_dict : dict"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("p",null,"  ",">",">",">"," from seqeval.metrics import performance_measure\n",">",">",">"," y_true = [","['","O","'",", ","'","O","'",", ","'","O","'",", ","'","B-MISC","'",", ","'","I-MISC","'",", ","'","O","'",", ","'","B-ORG","']",", ","['","B-PER","'",", ","'","I-PER","'",", ","'","O","']","]\n",">",">",">"," y_pred = [","['","O","'",", ","'","O","'",", ","'","B-MISC","'",", ","'","I-MISC","'",", ","'","I-MISC","'",", ","'","O","'",", ","'","O","']",", ","['","B-PER","'",", ","'","I-PER","'",", ","'","O","']","]\n",">",">",">"," performance_measure(y_true, y_pred)\n(3, 3, 1, 4)"),(0,l.kt)("h4",{id:"classification_report"},"classification","_","report"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"classification_report(y_true, y_pred, digits=2, suffix=False)\n")),(0,l.kt)("p",null,"Build a text report showing the main classification metrics."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("p",null,"  y_true : 2d array. Ground truth (correct) target values.\ny_pred : 2d array. Estimated targets as returned by a classifier.\ndigits : int. Number of digits for formatting output floating point values."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  report : string. Text summary of the precision, recall, F1 score for each class."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("p",null,"  ",">",">",">"," from seqeval.metrics import classification_report\n",">",">",">"," y_true = [","['","O","'",", ","'","O","'",", ","'","O","'",", ","'","B-MISC","'",", ","'","I-MISC","'",", ","'","I-MISC","'",", ","'","O","']",", ","['","B-PER","'",", ","'","I-PER","'",", ","'","O","']","]\n",">",">",">"," y_pred = [","['","O","'",", ","'","O","'",", ","'","B-MISC","'",", ","'","I-MISC","'",", ","'","I-MISC","'",", ","'","I-MISC","'",", ","'","O","']",", ","['","B-PER","'",", ","'","I-PER","'",", ","'","O","']","]\n",">",">",">"," print(classification_report(y_true, y_pred))\nprecision    recall  f1-score   support\n","<","BLANKLINE",">","\nMISC       0.00      0.00      0.00         1\nPER       1.00      1.00      1.00         1\n","<","BLANKLINE",">","\nmicro avg       0.50      0.50      0.50         2\nmacro avg       0.50      0.50      0.50         2\n","<","BLANKLINE",">"))}o.isMDXComponent=!0}}]);